using Dapper;

using System.Data;
using System.Data.SqlClient;
using System.Linq.Expressions;

// NOTA: Debe tenet instalado el NuGet Dapper Version: 2.0.123 ó superior
// NOTA: Debe tenet instalado el NuGet System.Data.SqlClient Version: 4.8.3 ó superior
// NOTA: Debe tener instalado el NuGet ExpressionExtensionSQL Version: 1.2.7 ó Superior
namespace $EspacioNombre$.Repository;

/// <summary>
/// Base Repository Customer
/// </summary>
/// <typeparam name="T"></typeparam>
/// <autogeneratedoc />
public abstract class BaseRepositoryCustomer<T> : Base<T> where T : class
{
    protected readonly SqlConnection _Conexion;
    protected readonly string _QuerySelect = string.Empty;

    /// <summary>
    /// Initializes a new instance of the <see cref="BaseRepositoryCustomer{T}"/> class.
    /// </summary>
    /// <param name="conexion">The conexion.</param>
    /// <autogeneratedoc />
    public BaseRepositoryCustomer(SqlConnection conexion, string querySelect)
    {
        _Conexion = conexion;
        _QuerySelect = querySelect;
    }

    /// <summary>
    /// Selects all.
    /// </summary>
    /// <returns></returns>
    /// <autogeneratedoc />
    public IEnumerable<T> SelectAll()
    {
        return _Conexion.Query<T>(_QuerySelect);
    }

    /// <summary>
    /// Selects all asynchronous.
    /// </summary>
    /// <returns></returns>
    public async Task<IEnumerable<T>> SelectAllAsync()
    {
        return await _Conexion.QueryAsync<T>(_QuerySelect);
    }

    /// <summary>
    /// Selects the by identifier asynchronous.
    /// </summary>
    /// <param name="where">The where.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">where</exception>
    public IEnumerable<T> SelectAll(Expression<Func<T, bool>> where)
    {
        if (where == null)
            throw new ArgumentNullException(nameof(where));

        var whereSql = GetWhere(where, _QuerySelect);

        return _Conexion.Query<T>(whereSql.Key, whereSql.Value);
    }

    /// <summary>
    /// Selects all asynchronous.
    /// </summary>
    /// <param name="where">The where.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">where</exception>
    public async Task<IEnumerable<T>> SelectAllAsync(Expression<Func<T, bool>> where)
    {
        if (where == null)
            throw new ArgumentNullException(nameof(where));

        var whereSql = GetWhere(where, _QuerySelect);

        return await _Conexion.QueryAsync<T>(whereSql.Key, whereSql.Value);
    }

    /// <summary>
    /// Selects the first.
    /// </summary>
    /// <returns></returns>
    /// <autogeneratedoc />
    public T SelectFirst()
    {
        return _Conexion.QueryFirst<T>(_QuerySelect);
    }

    /// <summary>
    /// Selects the first asynchronous.
    /// </summary>
    /// <returns></returns>
    public async Task<T> SelectFirstAsync()
    {
        return await _Conexion.QueryFirstAsync<T>(_QuerySelect);
    }


    /// <summary>
    /// Selects the by query first expression.
    /// </summary>
    /// <param name="where">The where.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">where</exception>
    public T SelectFirst(Expression<Func<T, bool>> where)
    {
        if (where == null)
            throw new ArgumentNullException(nameof(where));

        var whereSql = GetWhere(where, _QuerySelect);

        return _Conexion.QueryFirst<T>(whereSql.Key, whereSql.Value);
    }

    /// <summary>
    /// Selects the first asynchronous.
    /// </summary>
    /// <param name="where">The where.</param>
    /// <returns></returns>
    /// <exception cref="System.ArgumentNullException">where</exception>
    public async Task<T> SelectFirstAsync(Expression<Func<T, bool>> where)
    {
        if (where == null)
            throw new ArgumentNullException(nameof(where));

        var whereSql = GetWhere(where, _QuerySelect);

        return await _Conexion.QueryFirstAsync<T>(whereSql.Key, whereSql.Value);
    }
}
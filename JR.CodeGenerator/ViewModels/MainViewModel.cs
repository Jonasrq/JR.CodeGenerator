using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

using JR.CodeGenerator.Extensions;
using JR.CodeGenerator.Models;
using JR.CodeGenerator.Services;

using System.IO;
using System.Windows;
using System.Windows.Documents;
using System.Windows.Shapes;
using System.Xml.Linq;

namespace JR.CodeGenerator.ViewModels
{

    /// <summary>
    /// MainViewModel
    /// </summary>
    /// <autogeneratedoc />
    public partial class MainViewModel : ObservableObject
    {
        private readonly ISQLServerService _SQLServerService;


        [ObservableProperty]
        [NotifyCanExecuteChangedFor(nameof(ConctDBCommand))]
        [NotifyCanExecuteChangedFor(nameof(GenerateCommand))]
        string serverName = "localhost";
        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsEnableUderPass))]
        [NotifyCanExecuteChangedFor(nameof(GenerateCommand))]
        bool isIntegrateSecurity = true;
        [ObservableProperty]
        [NotifyCanExecuteChangedFor(nameof(GenerateCommand))]
        string userName;
        [ObservableProperty]
        [NotifyCanExecuteChangedFor(nameof(GenerateCommand))]
        string password;

        [ObservableProperty]
        [NotifyCanExecuteChangedFor(nameof(GenerateCommand))]
        string empresa = "Grupo Cercasa";
        [ObservableProperty]
        [NotifyCanExecuteChangedFor(nameof(GenerateCommand))]
        string autor = "Jonás Requena";
        [ObservableProperty]
        [NotifyCanExecuteChangedFor(nameof(GenerateCommand))]
        string nameSpace = "PruebaInicial";
        [ObservableProperty]
        bool toTitleCase = false;

        [ObservableProperty]
        string pathCode;

        [ObservableProperty]
        List<DataBase> dataBases;

        DataBase selectdataBases;
        /// <summary>
        /// Gets or sets the selectdata bases.
        /// </summary>
        /// <value>
        /// The selectdata bases.
        /// </value>
        /// <autogeneratedoc />
        public DataBase SelectdataBases
        {
            get { return selectdataBases; }
            set
            {
                SetProperty(ref selectdataBases, value);
                if (selectdataBases?.Id != 0)
                {
                    _ = GetTablesViewsAsync();
                }
            }
        }


        [ObservableProperty]
        List<TableView> dataTables;

        private AsyncRelayCommand conctDBCommand;
        private AsyncRelayCommand generateCommand;




        /// <summary>
        /// Initializes a new instance of the <see cref="MainViewModel"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public MainViewModel(ISQLServerService sQLServerService)
        {
            _SQLServerService = sQLServerService;
            PathCode = $"{System.IO.Path.Combine(Environment.CurrentDirectory, "Resultados")}";
        }

        /// <summary>
        /// Gets the conct database command.
        /// </summary>
        /// <value>
        /// The conct database command.
        /// </value>
        /// <autogeneratedoc />Hola 
        public IAsyncRelayCommand ConctDBCommand => conctDBCommand ??= new AsyncRelayCommand(ConctDBsAsync, () => ValidedConnect());
        /// <summary>
        /// Gets the select all command.
        /// </summary>
        /// <value>
        /// The select all command.
        /// </value>
        /// <autogeneratedoc />
        public IAsyncRelayCommand GenerateCommand => generateCommand ??= new AsyncRelayCommand(GenerateAsync, () => ValidedGenerar());



        /// <summary>
        /// Gets or sets a value indicating whether this instance is enable uder pass.
        /// </summary>
        /// <value>
        ///   <c>true</c> if this instance is enable uder pass; otherwise, <c>false</c>.
        /// </value>
        /// <autogeneratedoc />
        public bool IsEnableUderPass
        {
            get => !IsIntegrateSecurity;
        }

        /// <summary>
        /// Connects the dadabase asynchronous.
        /// </summary>
        /// <autogeneratedoc />

        private async Task ConctDBsAsync()
        {
            try
            {
                DataBases = await _SQLServerService.GetDataBaseseAsync(GetConnet);
                if (DataBases.Count != 0)
                    SelectdataBases = DataBases[0];

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.StackTrace);
                MessageBox.Show(ex.Message);
            }

        }

        /// <summary>
        /// Gets the t ables views asynchronous.
        /// </summary>
        /// <autogeneratedoc />
        private async Task GetTablesViewsAsync()
        {
            try
            {
                var _connt = GetConnet;
                _connt.DataBase = SelectdataBases?.Name;
                DataTables = await _SQLServerService.GetDatblesVistasAsync(_connt);

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.StackTrace);
                MessageBox.Show(ex.Message);
            }

        }

        /// <summary>
        /// Generates the asynchronous.
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <autogeneratedoc />
        private async Task GenerateAsync()
        {
            try
            {
                foreach (var item in DataTables)
                {
                    foreach (var items in item.Children.Where(x => x.IsSelected))
                    {
                        var _connet = GetConnet;
                        _connet.TableName = items.Name.UpperFirstChar();
                        _connet.DataBase = SelectdataBases.Name;
                        await _SQLServerService.GenerateCode(_connet, GetDataGen);
                    }
                }
                MessageBox.Show("El proceso ha culminado satisfactoriamente");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.StackTrace);
                MessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// Connecs this instance.
        /// </summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        private DataConnection GetConnet
        {
            get
            {
                if (!ValidedConnect())
                {
                    throw new Exception("ServerName no puesde estas vacio /nUserName y Password no pueden estar vacios");
                }

                return new DataConnection()
                {
                    ServerName = serverName,
                    IsIntegrateSecurity = isIntegrateSecurity,
                    UserName = userName,
                    Password = password
                };
            }

        }

        /// <summary>
        /// Gets the data gen.
        /// </summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        private DataGeneral GetDataGen
        {
            get => new DataGeneral()
            {
                Empresa = empresa,
                Autor = autor,
                NameSpace = nameSpace,
                Path = pathCode,
                ToTitleCase = toTitleCase
            };
        }



        /// <summary>
        /// Valideds the connect.
        /// </summary>
        /// <returns></returns>
        /// <exception cref="System.Exception">ServerName no puesde estas vacio
        /// or
        /// UserName y Password no pueden estar vacios</exception>
        private bool ValidedConnect()
        {
            if (string.IsNullOrWhiteSpace(ServerName))
                return false;//throw new Exception("ServerName no puesde estas vacio");

            if (!IsIntegrateSecurity && (string.IsNullOrWhiteSpace(UserName) || string.IsNullOrWhiteSpace(Password)))
                return false; //throw new Exception("UserName y Password no pueden estar vacios");

            return true;
        }

        /// <summary>
        /// Valideds the generar.
        /// </summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        private bool ValidedGenerar()
        {
            bool ret = string.IsNullOrWhiteSpace(Empresa) || string.IsNullOrWhiteSpace(Autor) || string.IsNullOrWhiteSpace(NameSpace);
            if (string.IsNullOrWhiteSpace(ServerName) || ret)
                return false;

            if (!IsIntegrateSecurity && (string.IsNullOrWhiteSpace(UserName) || string.IsNullOrWhiteSpace(Password)) || ret)
                return false;

            return true;
        }
    }

}
